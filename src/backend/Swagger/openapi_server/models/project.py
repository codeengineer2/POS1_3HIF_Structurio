from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, title=None, status=None, description=None, created_at=None, updated_at=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param id: The id of this Project.  # noqa: E501
        :type id: str
        :param title: The title of this Project.  # noqa: E501
        :type title: str
        :param status: The status of this Project.  # noqa: E501
        :type status: str
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param created_at: The created_at of this Project.  # noqa: E501
        :type created_at: datetime
        :param updated_at: The updated_at of this Project.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'title': str,
            'status': str,
            'description': str,
            'created_at': datetime,
            'updated_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'status': 'status',
            'description': 'description',
            'created_at': 'createdAt',
            'updated_at': 'updatedAt'
        }

        self._id = id
        self._title = title
        self._status = status
        self._description = description
        self._created_at = created_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Project.


        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Project.


        :param id: The id of this Project.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Project.


        :return: The title of this Project.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Project.


        :param title: The title of this Project.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def status(self) -> str:
        """Gets the status of this Project.


        :return: The status of this Project.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Project.


        :param status: The status of this Project.
        :type status: str
        """
        allowed_values = ["active", "completed", "archived"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def description(self) -> str:
        """Gets the description of this Project.


        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Project.


        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Project.


        :return: The created_at of this Project.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Project.


        :param created_at: The created_at of this Project.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Project.


        :return: The updated_at of this Project.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Project.


        :param updated_at: The updated_at of this Project.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
