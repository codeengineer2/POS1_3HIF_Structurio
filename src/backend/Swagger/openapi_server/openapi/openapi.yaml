openapi: 3.0.3
info:
  title: Structurio Auth API
  version: 1.0.0
  description: Endpoints

servers:
  - url: http://localhost:8080

paths:
  /auth/check-email:
    post:
      summary: Prüfe ob E-Mail existiert
      operationId: auth_check_email_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRequest'
      responses:
        "200":
          description: Existenzprüfung durchgeführt
        "404":
          description: E-Mail nicht gefunden
        "500":
          description: Interner Serverfehler
      x-openapi-router-controller: openapi_server.controllers.user_controller

  /auth/login:
    post:
      summary: Benutzer einloggen
      operationId: auth_login_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: Login erfolgreich
        "401":
          description: Fehlerhafte Daten
        "500":
          description: Interner Serverfehler
      x-openapi-router-controller: openapi_server.controllers.user_controller

  /auth/register:
    post:
      summary: Benutzer registrieren
      operationId: auth_register_post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        "201":
          description: Erfolgreich registriert
        "409":
          description: E-Mail existiert bereits
        "400":
          description: Ungültige Eingabedaten
        "500":
          description: Interner Serverfehler
      x-openapi-router-controller: openapi_server.controllers.user_controller

  /projects:
    post:
      summary: Neues Projekt mit leerem Board erstellen
      operationId: create_project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRequest'
      responses:
        "201":
          description: Projekt erfolgreich erstellt
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  pid:
                    type: integer
                    example: 42
                  board:
                    type: object
                    properties:
                      id:
                        type: integer
                      project_id:
                        type: integer
        "400":
          description: Ungültige Eingabe
        "500":
          description: Interner Serverfehler
      x-openapi-router-controller: openapi_server.controllers.project_controller

    put:
      summary: Bestehendes Projekt aktualisieren
      operationId: update_project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
      responses:
        "200":
          description: Projekt erfolgreich aktualisiert
        "400":
          description: Ungültige Eingabedaten
        "404":
          description: Projekt nicht gefunden
        "500":
          description: Serverfehler
      x-openapi-router-controller: openapi_server.controllers.project_controller

  /projects/{pid}:
    delete:
      summary: Projekt löschen
      operationId: delete_project
      parameters:
        - in: path
          name: pid
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Projekt erfolgreich gelöscht
        "404":
          description: Projekt nicht gefunden
        "500":
          description: Serverfehler
      x-openapi-router-controller: openapi_server.controllers.project_controller

  /columns:
    post:
      summary: Neue Spalte zu einem Board hinzufügen
      operationId: openapi_server.controllers.column_controller.add_column
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnRequest'
      responses:
        "201":
          description: Spalte erfolgreich erstellt
          content:
            application/json:
              schema:
                type: object
                properties:
                  cid:
                    type: integer
                  name:
                    type: string
        "400":
          description: Ungültige Eingabe
        "500":
          description: Interner Serverfehler

    put:
      summary: Spaltennamen aktualisieren
      operationId: update_column  
      x-openapi-router-controller: openapi_server.controllers.column_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ColumnUpdateRequest'
      responses:
        "200":
          description: Spalte erfolgreich aktualisiert
        "400":
          description: Ungültige Eingabe
        "404":
          description: Spalte nicht gefunden
        "500":
          description: Serverfehler beim Aktualisieren

  /issues:
    post:
      summary: Neues Issue hinzufügen
      operationId: openapi_server.controllers.issue_controller.add_issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueRequest'
      responses:
        '201':
          description: Issue erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
        '400':
          description: Ungültige Eingabe
        '500':
          description: Serverfehler beim Erstellen

    put:
      summary: Bestehendes Issue aktualisieren
      operationId: openapi_server.controllers.issue_controller.update_issue
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateRequest'
      responses:
        '200':
          description: Issue erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueResponse'
        '400':
          description: Ungültige Eingabe
        '404':
          description: Issue nicht gefunden
        '500':
          description: Serverfehler beim Aktualisieren

  /issues/{id}:
    delete:
      summary: Issue löschen
      operationId: openapi_server.controllers.issue_controller.delete_issue
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Issue erfolgreich gelöscht
        '404':
          description: Issue nicht gefunden
        '500':
          description: Serverfehler beim Löschen

  /timestamps/{uid}:
    get:
      summary: Alle Zeitstempel für einen Benutzer abrufen
      operationId: get_timestamps_by_user
      parameters:
        - name: uid
          in: path
          description: ID des Benutzers
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Liste der Zeitstempel
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timestamp'
        '404':
          description: Keine Zeitstempel gefunden für den Benutzer
      x-openapi-router-controller: openapi_server.controllers.timestamp_controller

  /timestamps/{uid}/{zid}:
    put:
      summary: Check-out eines bestehenden Zeitstempels
      operationId: update_timestamp
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
        - name: zid
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimestampUpdate'
      responses:
        '200':
          description: Zeitstempel erfolgreich aktualisiert
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamp'
      x-openapi-router-controller: openapi_server.controllers.timestamp_controller

  /timestamps:
    post:
      summary: Neuen Zeitstempel (Check-in) anlegen
      operationId: create_timestamp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TimestampCreate'
      responses:
        '201':
          description: Zeitstempel angelegt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timestamp'
      x-openapi-router-controller: openapi_server.controllers.timestamp_controller

  /abrechnung/{uid}/{pid}:
    get:
      summary: Liste aller Abrechnungen
      operationId: get_abrechnungen
      x-openapi-router-controller: openapi_server.controllers.abrechnung_controller
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
          description: Benutzer-ID
        - name: pid
          in: path
          required: true
          schema:
            type: integer
          description: Projekt-ID
      responses:
        '200':
          description: Erfolgreiche Antwort mit Abrechnungs-Liste
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Abrechnung'
        '400':
          description: Ungültige Eingabedaten

  /abrechnung:
    post:
      summary: Neue Abrechnung erstellen
      operationId: create_abrechnung
      x-openapi-router-controller: openapi_server.controllers.abrechnung_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbrechnungCreate'
      responses:
        "201":
          description: Abrechnung erfolgreich erstellt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Abrechnung'
        "400":
          description: Ungültige Eingabedaten
        "500":
          description: Interner Serverfehler
    
components:
  schemas:
    EmailRequest:
      type: object
      required: [email]
      properties:
        email:
          type: string
          format: email
          example: max@example.com

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: max@example.com
        password:
          type: string
          format: password
          example: pass123

    RegisterRequest:
      type: object
      required: [firstname, lastname, email, password, birthdate]
      properties:
        firstname:
          type: string
        lastname:
          type: string
        email:
          type: string
          format: email
          example: max@example.com
        password:
          type: string
          format: password
          example: pass123
        birthdate:
          type: string
          format: date
          example: 2005-04-01

    ProjectRequest:
      type: object
      required: [name, color, owner_uid]
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        color:
          type: string
          example: "#2288FF"
        owner_uid:
          type: integer
          example: 1

    ProjectUpdateRequest:
      type: object
      required: [pid, name, description, color]
      properties:
        pid:
          type: integer
        name:
          type: string
        description:
          type: string
        color:
          type: string

    ColumnRequest:
      type: object
      required:
        - board_id
        - name
      properties:
        board_id:
          type: integer
          example: 1
        name:
          type: string

    ColumnUpdateRequest:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string

    IssueRequest:
      type: object
      required:
        - column_id
        - description
      properties:
        column_id:
          type: integer
          example: 1
        description:
          type: string
          example: "Neue Aufgabe"

    IssueUpdateRequest:
      type: object
      required:
        - id
        - description
      properties:
        id:
          type: integer
          example: 1
        description:
          type: string
          example: "Andere Aufgabe"

    DeleteIssueRequest:
      type: object
      required:
        - issue_id
      properties:
        issue_id:
          type: integer

    IssueResponse:
      type: object
      properties:
        id:
          type: integer
        column_id:
          type: integer
        description:
          type: string

    TimestampCreate:
      type: object
      required: [uid, datum_in, checkin]
      properties:
        uid:
          type: integer
        datum_in:
          type: string
          format: date
        checkin:
          type: string
          format: time

    TimestampUpdate:
      type: object
      required: [datum_out, checkout, duration]
      properties:
        datum_out:
          type: string
          format: date
        checkout:
          type: string
          format: time
        duration:
          type: string

    Timestamp:
      allOf:
        - $ref: '#/components/schemas/TimestampCreate'
        - type: object
          properties:
            zid:
              type: integer
            datum_out:
              type: string
              format: date
            checkout:
              type: string
              format: time
            duration:
              type: string

    Abrechnung:
      type: object
      properties:
        aid:
          type: integer
          description: Eindeutiger Beleg-Identifikator
        uid:
          type: integer
          description: Benutzer-ID
        pid:
          type: integer
          description: Projekt-ID
        name:
          type: string
          description: Name der Abrechnung
        date:
          type: string
          format: date
          description: Datum der Abrechnung
        price:
          type: number
          format: float
          description: Betrag in Euro
        category:
          type: string
          description: Kategorie der Abrechnung
        rechnung:
          type: string
          nullable: true
          description: Optionales Feld für weitere Rechnungsangaben
        user:
          type: object
          description: Verknüpfter Benutzer (Kurzreferenz)
          properties:
            id:
              type: integer
            name:
              type: string
        project:
          type: object
          description: Verknüpftes Projekt (Kurzreferenz)
          properties:
            id:
              type: integer
            name:
              type: string
      required:
        - aid
        - uid
        - pid
        - name
        - date
        - price
        - category
    AbrechnungCreate:
      type: object
      required: [uid, pid, name, date, price, category, rechnung]
      properties:
        uid:       { type: integer }
        pid:       { type: integer }
        name:      { type: string }
        date:      { type: string, format: date }
        price:     { type: number, format: float }
        category:  { type: string }
        rechnung:  { type: string, nullable: true }